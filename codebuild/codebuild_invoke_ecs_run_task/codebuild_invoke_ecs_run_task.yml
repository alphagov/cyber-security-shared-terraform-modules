version: 0.2

env:
  shell: bash

phases:
  pre_build:
    commands:
      - set -e
      - |
        cat <<EOF > /opt/get_output_value.sh
        #!/bin/bash
        outputs_file=\$1;
        property=\$2;
        cat \$outputs_file | jq -r --arg prop "\$property" '.[\$prop].value'
        EOF
      - TERRAFORM_OUTPUT_VAR="CODEBUILD_SRC_DIR_${TERRAFORM_OUTPUT_ARTIFACT}"
      - TERRAFORM_OUTPUT_PATH=${!TERRAFORM_OUTPUT_VAR}
      - TF_OUTPUT=$TERRAFORM_OUTPUT_PATH/$TERRAFORM_OUTPUT_FILE
      - role_arn="arn:aws:iam::$AWS_ACCOUNT_ID:role/$ROLE_NAME"
      - source /usr/local/bin/sts-assume-role.sh "$role_arn" "$AWS_DEFAULT_REGION"

  build:
    commands:
      - set -e
      - CLUSTER=$(bash /opt/get_output_value.sh $TF_OUTPUT $ECS_CLUSTER_PROP)
      - GROUP=$(bash /opt/get_output_value.sh $TF_OUTPUT $ECS_GROUP_PROP)
      - TASK_DEFINITION=$(bash /opt/get_output_value.sh $TF_OUTPUT $TASK_DEFINITION_PROP)
      - NETWORK_CONFIG=$(bash /opt/get_output_value.sh $TF_OUTPUT $NETWORK_CONFIG_PROP)
      - >
        task_config="aws ecs run-task
        --region=$AWS_REGION
        --task-definition=$TASK_DEFINITION
        --cluster=$CLUSTER
        --group=$GROUP
        --network-configuration='$NETWORK_CONFIG'
        --count=$TASK_COUNT
        --launch-type=$LAUNCH_TYPE"
      - echo $task_config > /opt/task-bash.sh
      - task_output=$(bash /opt/task-bash.sh)
      - echo $task_output > /opt/task.json
  post_build:
    commands:
      - set -e
      - echo $AWAIT_COMPLETION
      - |
        if [[ "$AWAIT_COMPLETION" == "true" ]]; then
          echo "Waiting for completion status of task"
          cat /opt/task.json
          completed=0
          while [[ $completed -eq 0 ]]; do
            completed=1
            tasks=$(cat /tmp/task.json | jq '.tasks[] | .taskArn')
            for task in $tasks; do
              echo $task;
              state=$(aws ecs describe-tasks --tasks $task)
              last_status=$(echo $state | jq -r '.tasks[0].containers[0].lastStatus')
              if [[ $last_status == $AWAIT_LAST_STATUS ]]; then
                exit_code=$(echo $state | jq -r '.tasks[0].containers[0].exitCode')
                if [[ "$exit_code" != "$AWAIT_EXIT_CODE" ]]; then
                  echo "Exit code: $exit_code does not match $AWAIT_EXIT_CODE"
                  completed=0
                fi
              else
                echo "Last status: $last_status does not match $AWAIT_LAST_STATUS"
                completed=0
              fi
            done
            sleep 1m
          done
        fi
      - exit 1

artifacts:
  name: task
  files:
    - task-config.json
  discard-paths: no
  base-directory: /opt
