version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
      - echo Logging into Dockerhub...
      - docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD
      - echo Assuming role into target AWS account for deployment
      - role_arn="arn:aws:iam::${AWS_ACCOUNT_ID}:role/${ROLE_NAME}"
      - DURATION=${3:-2400}
      - TF_DEPLOYER_ROLE=`aws sts assume-role --role-arn $role_arn --role-session-name concourse-task --duration $DURATION`
      - export AWS_ACCESS_KEY_ID=`echo "${TF_DEPLOYER_ROLE}" | jq -r '.Credentials.AccessKeyId'`
      - export AWS_SECRET_ACCESS_KEY=`echo "${TF_DEPLOYER_ROLE}" | jq -r '.Credentials.SecretAccessKey'`
      - export AWS_SESSION_TOKEN=`echo "${TF_DEPLOYER_ROLE}" | jq -r '.Credentials.SessionToken'`
      - aws sts get-caller-identity
      - ACTIONS_REQUIRED="${CODEBUILD_SRC_DIR_actions_required}/actions_required.json"
      - if [ -n "$CHECK_TRIGGER" ]; then
          TRIGGER_BUILD=$(jq --arg ACTION_NAME "$ACTION_NAME" '.[] | select(.action ==$ACTION_NAME).required' $ACTIONS_REQUIRED); 
        else 
          echo "CHECK_TRIGGER not supplied, defaulting to true..";
          TRIGGER_BUILD=true; 
        fi
  build:
    commands:
      - if $TRIGGER_BUILD; then
          echo Build started on `date`;
          echo Building the Docker image...;
          cd $CODEBUILD_SRC_DIR;
          docker build -t ${ECR_IMAGE_REPO_NAME}:${ECR_IMAGE_TAG} $ECR_CONTEXT -f $ECR_DOCKERFILE;
          docker tag ${ECR_IMAGE_REPO_NAME}:${ECR_IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_IMAGE_REPO_NAME}:${ECR_IMAGE_TAG};
        else
          echo trigger build set to false, not rebuilding image;
        fi
  post_build:
    commands:
      - if $TRIGGER_BUILD; then
          aws sts get-caller-identity;
          echo Build completed on `date`;
          echo Pushing the Docker image...;
          ECR_REPO=$(aws ecr describe-repositories --repository-names ${ECR_IMAGE_REPO_NAME} 2>&1);
          if echo ${ECR_REPO} | grep -q RepositoryNotFoundException; then
            aws ecr create-repository --repository-name ${ECR_IMAGE_REPO_NAME};
            else
              echo Repository already exists, pushing image...;
            fi;
          docker push $AWS_ACCOUNT_ID.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_IMAGE_REPO_NAME}:${ECR_IMAGE_TAG};
        else
          echo Build set to false, not pushing image;
        fi
